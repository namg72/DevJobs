
************************************************* L I V E W I R E *******************************************************************

.1 Instalamos liveWire   -->  "./vendor/bin/sail composer require livewire/livewire"

.2 En en archivo app.  antes de cerrar el head ponemos --> " @livewireStyles", y antes de cerrar el body --> " @livewireScripts"

.3 Creamos componente de livewire  --> "./vendor/bin/sail artisan make:livewire NombreComponente" (la primea en mayuscula y camelCase).
   Esto noss crea dos archivos: 
            - la clase que se aloja dentro de la app->Livewire->NombreComponte
            - la vista que se aloja en app->resource->views->livewire->nombre-componente.blade.php

.4 luego modificamos su vista y lo renderizamos en el punto que queramos poniendo en su componente padre --> " <livewire:nombre-componente />"

.5 Validacion campos formulario en liveWire

    Para que se comunique el formulario de la vissta livewire con el backen (el controlador) en los campos el atributo name hay que cambiarlo por wire:model="nombre del modelo"

    Luego en archivo de clase que esta en la caperta livewire en app ponemos la reglas de validación





************************************************* S E E D E E R S *******************************************************************

.1 Creamos un seeder para la bd con este comando:
       " ./vendor/bin/sail artisan make:seeder NombreSeeder"
    Se crea en la carpeta app->database->seeders->NombreSeeder.php

.2 creamos migración de la tabla del seeder:

    " ./vendor/bin/sail artisan make:migration nombre_tabla"

.3 abrimos la nueva migración y modificamos sus campos si es necesario

.4 ejecutaqmos la mibración:

      " ./vendor/bin/sail artisan migrate"

.5 Refenciamos en el DatabaseSeeder el seeder que hemos creado dentro la función run:
        
        public function run(): void
        {
            $this->call(SalarioSeeder::class);
        }

.6 ejecutamos el seeders:
    
          " ./vendor/bin/sail artisan db:seed"


************************************************* M O S T R A N D O  L A  T A B L A  E N  LA V I S T A  L I V E W I R E***********************************

El archivo de clase del componente livewire acuta como controlador. En este caso antes de mostar la vista vamos a consultar la bd
para traernos los datos de la tablas salarios.

.1 Creamos un modelo:
        "./vendor/bin/sail artisan make:model Salario"

Esto hace que podamos utilizar todos lo metodos del ORM Eloquen facilitando las consulta a la bd

.2  creamos la consultga dentro la clase livewire generando una variable que lamacena todos los registro del modelo Salario  almacenandola
    en una variable, y  la incluye como atributo en la vista:


        class CrearVacante extends Component
        {
            public function render()
            {
                //consulta BD para pasarla a la vistga

                $salarios = Salario::all();


                return view('livewire.crear-vacante', [
                    'salarios' => $salarios
                ]);
            }
        }


        ** Si solo quisiearamos traerno los datos de un campo en este caso el campo salario de la tabla salarios lo hariamos asi:
                  "  $salarios = Salario::pluck('salario'); "



.3 Dengro de la vista de livewire podemos mostar esa consulta. Em este caso lo hemos utilizado en la vista para introducirlos en el select:

         <select class="border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 rounded-md shadow-sm w-full"
            name="salario" id="salario">

            <option value="">-- Selecciona un salario --</option>
            @foreach ($salarios as $salario )
            <option value="{{$salario->id}}">{{$salario->salario}}</option>
            @endforeach


        </select>


************************************************* V A L I D A C I O N   D E   F O R M U L A R I O S ***********************************

Con livewrie no hace falta poner la directiva  @csrf ya que por defecto la tiene implementada

1. Para prevenir que nos recarge la pagina en el form poneñmos wire:submit.prevent que equvia al prevent default y le pasamos una
   funcion que definimos el el archivo de clase

        <form class="mdw-1/2 space-y-5" wire:submit.prevent='crearVacante'>


2.- luego la clase del componenete liveWire creamos la función que le pasamos al forn indicamos las reglas de validación
    la función recoge las reglas de validación que creamos antes y se la asignamos a una variable datos por ej

                 public function crearVacante()
                    {

                        $datos =  $this->validate();
                    }

3.- por ultimo en cada input hay que poner la directiva error con el nombre del campo y  dentro
    o bien pomenos un texto o bien accedemos a la variable message que recoge todos los errores
    que hemos definido en las rules de la clase

                    @error('titulo')
                    {{$message}}
                    @enderror

   ** para reutilzar este componente podemos cerarnos un componente livewire y en su vita 
      llamar a la variable $message dandole estilos y luego en el fomulario dentro de 
      @error llamar a este componente paandoele la variable como atrib

                @error('titulo')
                <livewire:mostrar-alerta :message="$message" />
                @enderror

        Esta variable la definimos sen la clase y le utilizamos en la vista del componente error


    ** para que no nos creee error al subir imanges en el archivo de clase hay que poner:
              use WithFileUploads;
       y Validamos el campo imagen ->   'imagen' => 'required|image|max:1024',

        ADemas en la vista en el campo imagen un accet="image/*" para que solo acepte las imagens
            <x-text-input id="imagen" class="block mt-1 w-full" type="file" wire:model="descripcion" placeholder="Imagen" accept="image/*" />


     ** Preview de la imagen a subir:

        LiveWire tiene el metodo temporayUrl que nos permite renderizar un preview antes de subir la imange para ello con una directiva if comprobamos
        que hemos tenemos una imagen seleccionada y en ese caso la renderizadmos ajustando su tamaño al deseado

               <div class="my-5 w-1/2 ">

                    @if($imagen)
                    <img src="{{ $imagen->temporaryUrl() }}">
                    @endif
                 </div>


************************************************* V I N C U L A R   S T O R A G E   C O N   P U B L I C  ***********************************


Los visistantes de la pagina solo tienen acceso a la carpeta public y nosotro guardamos las imagens en la capetea storge. Para que sea visibel entonces las 
imagens por los usuarioos entonces hay que vincular las dos carpegtas con el siguiente codigo:

                                 ./vendor/bin/sail artisan storage:link



*********************************************************************** P O L I C Y E S  ************************************************

Si copiamos la url de un usuario autenticado en la pagian de otor usuario autenticado autimaticamente este ultilmo podria verla, no pasaria si el usuario
no estuvese autenticado. Para evitar esto usamo lo policyes.

1. Primero creamos un policyes y lo asociamo al modelo que quermos ocultar 

        ./vendor/bin/sail artisan make:policy VacantePolicy --model=Vacante


BUSCAR INFORMACION DE COMO HACERLO NO ME HA SALIDO


*********************************************************************** E V E N T O S  ************************************************

                                    https://laravel-livewire.com/docs/2.x/events

Los eventso de livewire se pueden lanzar desde_
            La plantilla
            El componente
            Desde JavaScript global